package exporeport;

import java.io.IOException;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.opencsv.bean.StatefulBeanToCsv;
import com.opencsv.bean.StatefulBeanToCsvBuilder;
import com.opencsv.exceptions.CsvDataTypeMismatchException;
import com.opencsv.exceptions.CsvRequiredFieldEmptyException;
import com.sapienter.jbilling.server.invoice.InvoiceWS;
import com.sapienter.jbilling.server.order.OrderLineWS;
import com.sapienter.jbilling.server.order.OrderWS;
import com.sapienter.jbilling.server.util.api.JbillingAPI;
import com.sapienter.jbilling.server.util.api.JbillingAPIException;
import com.sapienter.jbilling.server.util.api.JbillingAPIFactory;

public class ExportFromDB {
	public static JbillingAPI hessianApiClient 	= null;
	private static final String STRING_ARRAY_SAMPLE = "/home/jbilling/Documents/amaysim/output/";
	
	public static Map<Integer, List<Integer>> ordersMap = new HashMap<>();
	public static List<ExportObject> exportObjects = new ArrayList<ExportObject>();
	
	public static void main(String[] args) throws JbillingAPIException, IOException, CsvDataTypeMismatchException, CsvRequiredFieldEmptyException {
		hessianApiClient 	= JbillingAPIFactory.getAPI("apiClient");
		Integer[] invoiceIds = {
				/*22106,22805,32967,28249,97102,28704,39864,28248,41764,22111,26029,23018,35138,59478,24237,96753,
				50011,96715,29511,96661,22703,96690,96651,96806,96766,96912,96878,96843,96667,96725,44426,37106,96601,23344,
				30685,53011,24565,26783,63271,26478,97109,97064,97095,97085,97101,97075,31841,97115,28450,23940,39900,32960,
				56659,97108,25248,47372,23946,28453,32963,39902,96604,25250,47374,24297,26316,96980,26113,42091,24241,29592,
				35330,97062,50405,97042,44136,30627,26728,36884,52540,24548,96600,24983,27779,97000,46281,32307,55377,27780,
				24984,38930,39881,97021,28612,33169,48002,25349,46293,38944,55389,96975,24955,27796,32322,41790,70785,35003,
				25918,29537,59503,97035,50036,33105,97167,39657,47386,97149,97143,97159,28400,36209,62020,26518,96640,51956,
				43442,30318,44149,36764,26841,97088,30546,97028,97017,97043,97036,97057,97051,44291,30906,37073,26842,97208,
				97247,97243,97241,97239,97242,97236,36457,52066,96633,30354,26533,43726,96655,27578,31925,54936,38196,45801,
				96627,43351,30342,51979,36233,62043,97064,97064,28158,97009,39452,32689,97181,27463,96998,35900,30029,96802,
				35901,42656,30030,28440,33138,56499,97186,39859,47801,97209,40188,33414,31832,97191,97197,97184,97189,97180,
				97039,97032,97048,97005,97014,97024,96658,96713,96643,96665,96649,96680,96645,96652,96662,96630,96638,96624,
				31830,96925,96954,37280,30954,53355,44604,63751,97244,96824,96790,31845,55347,46314,38842,96928,32180,31316,
				37516,96996,96624,97117,30861,37289,97142,30805,37138,97158,97135,97147,30399,96606,54974,38346,31992,46047,
				66324,97069,32287,97073,38890,46363,55494,97166,39391,56166,47218,32795,97012,38898,32295,46371,55602,97011,
				32754,96612,39118,46621,32441,97106,97081,33542,97094,97113,97120,97100,96903,96981,96877,96938,96850,96964,
				44163,36895,62954,52624,96982,97070,36897,97097,97104,97079,97091,44165,97199,34371,41344,41297,34440,96978,
				49488,50249,97044,35451,42144,97122,35958,35830,72200,84062,42582,60678,51067,96632,38053,96625,73396,97023,
				43862,62455,36640,52316,44103,96810,37026,97251,38206,45719,97017,97017,44692,96603,37430,44739,63993,97084,
				53634,37399,75543,96985,38090,54256,64713,76305,97194,38101,45199,51769,61785,43274,97138,97183,38234,45746,
				97227,97214,97222,97235,97218,97232,97252,67384,79310,39710,56376,47107,67387,39714,47110,56379,97246,39715,
				97257,56380,67388,97255,47111,96896,96867,96807,96929,96773,96838,97013,97045,97037,97019,97030,96880,96845,
				96913,96727,96768,96809,96727,96768,96913,96845,96809,96880,97215,97219,97228,97223,97211,97210,49790,96921,
				41535,47644,97105,67695,39813,56644,97271,97270,97269,97272,97268,97267,96849,96884,96771,96915,96732,96813,
				96764,96875,96841,96804,96910,96820,96858,96783,96922,96741,96891,57440,48206,96746,40371,96618,96615,96611,
				96609,96608,96623,43711,97139,42496,96635,50156,41975,97187,70965,59621,96620,59623,41977,50158,70967,73011,
				97116,51600,61936,43217,97040,97016,97007,97002,97033,97025,42230,50500,71081,60155,97170,97083,43221,51604,
				96610,96706,66977,55598,46712,96904,96797,96870,96759,96835,96777,96816,96918,96853,96888,96908,96874,96762,
				96839,96801,96703,97256,97259,97258,97254,70175,96994,49386,59020,96735,61724,51587,97118,97110,97103,97133,
				97127,97221,97213,97217,97226,97231,97263,55201,96854,96882,96944,96967,96907,63867,53253,96989,96700,96739,
				55648,96636,96666,96644,96660,96650,96793,96757,96719,61165,51425,96831,96698,96730,96800,96767,97161,55903,
				78370,66927,96634,96648,96642,96974,96993,96987,96997,96983,97026,53747,63981,54904,96775,65647,96734,65647,
				96775,54904,96734,66185,54938,96778,96737,97260,58668,96626,96616,96621,96613,97134,97148,97141,97128,96952,
				57203,96686,97047,97022,97031,97038,97152,97144,97022,97145,97132,97140,97157,97061,59599,97112,97107,97099,
				97119,62526,97123,97010,97018,97004,97046,97054,97072,97058,96757,61165,96793,96719,97237,97225,97234,97229,
				97068,97078,97096,97089,97225,96961,96979,96935,96933,76468,97192,96602,64888,97212,66805,96676,78004,66526,
				97114,97121,97263,97266,97265,97264,97179,97177,97172,96988,96984,96976,96975,97274,97273,97275,97076,97086,
				96646,96622,96637,96628,97204,97200,97195,96958,96977,96932,96924,97160,97168,97174,96617,96614,96999,97008,
				97003,97201,97196,97205,97015,97001,97006,97150,97238,97240,97074,97082,97063,97153,97162,97169,73702,97154,
				97207,97203,97198,96991,73357,96986,75286,96619,96654,96641,96647,97066,96656,74210,96992,97125,97129,97130,
				97137,97124,97077,97066,97066,97224,97233,97230,96951,96943,96990,96995,97220,97216,97027,97034,97125,97067,
				97178,97175,96607,96605,97190,97188,97020,97029,97071,96708,97041,97049,97146,97136,96619,96639,96631,97059,
				97050,97056,97050,96780,96668,96693,97202,97206,97052,96663,96669,97182,97185,97261,97262,96653,97126,97131,
				97060,97055,96749,97163,97156,97173,97176,97165,97171,97248,97250,96657,96664,97245,86629,97151,97098,97093,
				97092,97164,96673,97249,97065,97087,97193,96745,97080,97155,96678,96629,96659,97053,96829,97253,97111,97090,
				97090*/
				
				22001,22101,22004,22103,22007,22104,22010,22105,22012,22811,23000,23000,22013,22014,22015,22016,22017,22018,22019,22113,22020,
				22021,22023,22117,22301,22403,22501,22503,22404,22405,22504,22406,22505,22408,22409,23230,23016,22412,22414,22800,22701,23001,22801,
				22803,23400,22808,22809,23309,23227,23022,23329,23310,23416,23338,23426,23345,23932,24235,23444,23355,23461,23966,23370,23851,23843,
				96860,96855,96857,96859,21705,21706,22000,22100,23474,23476,23477,24164,23999,24127,24112,23816,23817,24161,23841,24109,24139,28834,25678,
				24942,25621,24180,24194,25513,25313,24528,24529,24533,24615,24544,24656,25212,24681,24803,26126,24691,25338,26049,24828,24913,26010,25169,
				24928,25681,25357,24941,27405,25369,26027,26160,28368,27807,26187,26326,27921,26368,28137,28892,26376,26582,27765,28728,26716,29141,29298,
				26786,26792,27867,27443,28771,29443,27208,28705,27212,27399,21703,21605,21704,21603,96973,96972,96971,96970,96969,96968,96966,96965,96963,
				96707,96960,96959,96957,96671,96681,96956,96691,96955,96953,96675,96962,96683,96950,96949,96948,96682,96692,96947,96942,96941,96939,96937,
				96672,96687,96696,96936,96934,96931,96930,96940,96926,96677,96679,96920,96701,96919,96670,96688,96718,96674,96723,96717,96684,96685,96917,
				96695,96916,96702,96914,96689,96945,96789,96709,96711,96694,96716,96747,96911,96909,96697,96731,96699,96763,96712,96704,96705,96923,96799,
				96710,96754,96906,96905,96902,96751,96900,96743,96714,96899,96760,96720,96898,96897,96758,96722,96721,96788,96895,96894,96779,96724,96726,
				96728,96729,96782,96733,96740,96736,96738,96893,96892,96890,96889,96887,96885,96742,96883,96852,96744,96748,96901,96750,96881,96879,96752,
				96755,96803,96756,96761,96876,96808,96765,96769,96770,96873,96872,96772,96774,96871,96842,96776,96785,96869,96781,96811,96927,96817,96784,
				96786,96787,96814,96791,96868,96805,96792,96866,96886,96840,96794,96795,96796,96798,96812,96865,96834,96815,96821,96818,96946,96819,96864,
				96863,96822,96823,96825,96826,96862,96827,96828,96830,96832,96833,96836,96837,96861,96856,96844,96846,96847,96848,96851,96909,96670,96862,
				96957,29443,96761,96712,96815
		
		};
		
		populateOrdersToMap(invoiceIds);
		ordersMap.entrySet();
		
		for (Entry<Integer, List<Integer>> entry : ordersMap.entrySet()) {
			ExportObject exportObject = new ExportObject();
			Integer orderId = entry.getKey();
			OrderWS orderWS= hessianApiClient.getOrder(orderId);
			exportObject.setActiveSince(orderWS.getActiveSince());
			exportObject.setUserID(orderWS.getUserId());
			exportObject.setOrderID(orderId);
			exportObject.setOrderNBD(orderWS.getNextBillableDay());
			exportObject.setActiveUntil(orderWS.getActiveUntil());
			exportObject.setInvoiceIDsGenerated(entry.getValue());
			List<OrderLineWS> lines = Arrays.asList(orderWS.getOrderLines());
			if (!lines.isEmpty()) {
				exportObject.setLineDescription(lines.get(0).getDescription());
			}
			exportObject.setNumberOfMissingInvoices(entry.getValue().size());
			exportObjects.add(exportObject);
		}
		for (ExportObject  exportObject : exportObjects) {
			System.out.println(exportObject);
		}
		writeToCSV(exportObjects, "OUTPUT");
		System.out.println("-------- done --------");
	}

	public static void populateOrdersToMap(Integer[] invoices){
		for (Integer invoiceId : invoices) {
			InvoiceWS invoiceWS = hessianApiClient.getInvoiceWS(invoiceId);
			Integer[] orders = invoiceWS.getOrders();
			for (Integer orderId : orders) {
				List<Integer> invoiceList = new ArrayList<>();
				if (ordersMap.keySet().contains(orderId)) {
					invoiceList = ordersMap.get(orderId);
				} 
				invoiceList.add(invoiceId);
				ordersMap.put(orderId, invoiceList);
			}
		}
	}
	
    public static void writeToCSV(List<ExportObject> exportObjects2,String fileName) throws IOException, CsvDataTypeMismatchException, CsvRequiredFieldEmptyException{
    	try (Writer writer = Files.newBufferedWriter(Paths.get(createFile(fileName)));) {
                StatefulBeanToCsv beanToCsv = new StatefulBeanToCsvBuilder(writer)
                		.withSeparator(',')
                        .build();
                beanToCsv.write(exportObjects2);
            }catch (Exception e) {
				e.printStackTrace();
			}
    	
    }
    
    public static String createFile(String fileName) throws IOException {
		SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss");
		String filePath = STRING_ARRAY_SAMPLE;
		fileName = new StringBuilder()
					.append(filePath)
					.append(fileName)
					.append("-")
					.append(format.format(new Date())).toString();
		fileName = fileName +".csv";
		return fileName;
	}
	
	
	public static void populateInvoicesToMap(Integer[] invoices){
		for (Integer invoiceId : invoices) {
			InvoiceWS invoiceWS = hessianApiClient.getInvoiceWS(invoiceId);
			Integer[] orders = invoiceWS.getOrders();
			for (Integer orderId : orders) {
				if (ordersMap.keySet().contains(orderId)) {
					List<Integer> invoiceList = ordersMap.get(orderId);
					invoiceList.add(invoiceId);
					ordersMap.put(orderId, invoiceList);
				};
			}
		}
	}
}
